version: '3'

services:
  reverse-proxy:
    image: traefik:2.9
    command:
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.email=test@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=acme.json"
#      Let's Encrypt staging server
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
#      Let's Encrypt production server
#      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    ports:
      # The HTTP port
      - "80:80"
      # HTTPS
      - "433:433"
    volumes:
#     So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
#      файл, в котором хранятся сведения о полученных сертификатах;
      - ./acme.json:/acme.json
    restart: unless-stopped

  crm-server:
    build:
      context: ./server
    image: crm-server
    depends_on:
      - crm-db
    env_file:
      - server.env
    labels:
      - "traefik.http.routers.crm-server.rule=PathPrefix(`/api`)"
      - "traefik.http.services.crm-server.loadbalancer.server.port=9010"
    restart: unless-stopped

  crm-client:
    build:
      context: ./client
    image: crm-client
    labels:
      - "traefik.http.routers.crm-client.rule=PathPrefix(`/`)"
      - "traefik.http.services.crm-client.loadbalancer.server.port=9009"
#  Let's Encrypt¶
      - "traefik.http.routers.blog.rule=Host(`example.com`)"
      - "traefik.http.routers.blog.tls=true"
      - "traefik.http.routers.blog.tls.certresolver=myresolver"
    restart: unless-stopped


  crm-db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "db_pass"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
#      - ../2. Init Database:/docker-entrypoint-initdb.d
      - ./postgresql:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
